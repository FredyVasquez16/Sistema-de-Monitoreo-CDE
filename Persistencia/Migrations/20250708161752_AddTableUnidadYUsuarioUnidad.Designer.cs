// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistencia;

#nullable disable

namespace Persistencia.Migrations
{
    [DbContext(typeof(SistemaMonitoreaCdeContext))]
    [Migration("20250708161752_AddTableUnidadYUsuarioUnidad")]
    partial class AddTableUnidadYUsuarioUnidad
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CuotasSesiones", b =>
                {
                    b.Property<int>("CuotasId")
                        .HasColumnType("integer")
                        .HasColumnName("cuotasid");

                    b.Property<int>("SesionesId")
                        .HasColumnType("integer")
                        .HasColumnName("sesionesid");

                    b.HasKey("CuotasId", "SesionesId")
                        .HasName("pk_cuotassesiones");

                    b.HasIndex("SesionesId")
                        .HasDatabaseName("ix_cuotassesiones_sesionesid");

                    b.ToTable("cuotassesiones");
                });

            modelBuilder.Entity("Dominio.AreasAsesoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_areas_asesorias");

                    b.ToTable("areas_asesorias");
                });

            modelBuilder.Entity("Dominio.AsesoresClientesEmpresas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CLienteEmpresaId")
                        .HasColumnType("integer")
                        .HasColumnName("cliente_empresa_id");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_asesores_clientes_empresas");

                    b.ToTable("asesores_clientes_empresas");
                });

            modelBuilder.Entity("Dominio.Asesoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaAsesoriaId")
                        .HasColumnType("integer")
                        .HasColumnName("area_asesoria_id");

                    b.Property<string>("Asunto")
                        .HasColumnType("text")
                        .HasColumnName("asunto");

                    b.Property<string>("AyudaAdicional")
                        .HasColumnType("text")
                        .HasColumnName("ayuda_adicional");

                    b.Property<string>("Centro")
                        .HasColumnType("text")
                        .HasColumnName("centro");

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer")
                        .HasColumnName("cliente_id");

                    b.Property<string>("CodigoUnico")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("codigo_unico");

                    b.Property<string>("DescripcionAsesoriaEspecializada")
                        .HasColumnType("text")
                        .HasColumnName("descripcion_asesoria_especializada");

                    b.Property<string>("DescripcionDerivado")
                        .HasColumnType("text")
                        .HasColumnName("descripcion_derivado");

                    b.Property<string>("DescripcionReferido")
                        .HasColumnType("text")
                        .HasColumnName("descripcion_referido");

                    b.Property<DateTime>("FechaSesion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_sesion");

                    b.Property<int>("FuenteFinanciamientoId")
                        .HasColumnType("integer")
                        .HasColumnName("fuente_financiamiento_id");

                    b.Property<string>("Notas")
                        .HasColumnType("text")
                        .HasColumnName("notas");

                    b.Property<int?>("NumeroParticipantes")
                        .HasColumnType("integer")
                        .HasColumnName("numero_participantes");

                    b.Property<string>("ReferidoA")
                        .HasColumnType("text")
                        .HasColumnName("referido_a");

                    b.Property<TimeOnly?>("TiempoContacto")
                        .HasColumnType("time without time zone")
                        .HasColumnName("tiempo_contacto");

                    b.Property<int>("TipoContactoId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_contacto_id");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("unidad");

                    b.HasKey("Id")
                        .HasName("pk_asesorias");

                    b.HasIndex("AreaAsesoriaId")
                        .HasDatabaseName("ix_asesorias_area_asesoria_id");

                    b.HasIndex("ClienteId")
                        .HasDatabaseName("ix_asesorias_cliente_id");

                    b.HasIndex("FuenteFinanciamientoId")
                        .HasDatabaseName("ix_asesorias_fuente_financiamiento_id");

                    b.HasIndex("TipoContactoId");

                    b.ToTable("asesorias");
                });

            modelBuilder.Entity("Dominio.AsesoriaAsesor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AsesorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("asesor_id");

                    b.Property<int>("AsesoriaId")
                        .HasColumnType("integer")
                        .HasColumnName("asesoria_id");

                    b.HasKey("Id")
                        .HasName("pk_asesorias_asesores");

                    b.HasIndex("AsesorId")
                        .HasDatabaseName("ix_asesorias_asesores_asesor_id");

                    b.HasIndex("AsesoriaId")
                        .HasDatabaseName("ix_asesorias_asesores_asesoria_id");

                    b.ToTable("asesorias_asesores");
                });

            modelBuilder.Entity("Dominio.AsesoriaContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AsesoriaId")
                        .HasColumnType("integer")
                        .HasColumnName("asesoria_id");

                    b.Property<int>("ClienteEmpresaId")
                        .HasColumnType("integer")
                        .HasColumnName("cliente_empresa_id");

                    b.Property<int>("ContactoId")
                        .HasColumnType("integer")
                        .HasColumnName("contacto_id");

                    b.HasKey("Id")
                        .HasName("pk_asesorias_contactos");

                    b.HasIndex("AsesoriaId")
                        .HasDatabaseName("ix_asesorias_contactos_asesoria_id");

                    b.HasIndex("ClienteEmpresaId")
                        .HasDatabaseName("ix_asesorias_contactos_cliente_empresa_id");

                    b.HasIndex("ContactoId")
                        .HasDatabaseName("ix_asesorias_contactos_contacto_id");

                    b.ToTable("asesorias_contactos");
                });

            modelBuilder.Entity("Dominio.AsesoriasArchivos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AsesoriaId")
                        .HasColumnType("integer")
                        .HasColumnName("asesoria_id");

                    b.Property<byte[]>("Contenido")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("contenido");

                    b.Property<DateTime>("FechaSubida")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_subida");

                    b.Property<string>("NombreOriginal")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_original");

                    b.Property<string>("TipoMime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_mime");

                    b.HasKey("Id")
                        .HasName("pk_asesorias_archivos");

                    b.HasIndex("AsesoriaId")
                        .HasDatabaseName("ix_asesorias_archivos_asesoria_id");

                    b.ToTable("asesorias_archivos");
                });

            modelBuilder.Entity("Dominio.Capacitaciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Centro")
                        .HasColumnType("text")
                        .HasColumnName("centro");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ciudad");

                    b.Property<string>("CoPatrocinios")
                        .HasColumnType("text")
                        .HasColumnName("co_patrocinios");

                    b.Property<string>("CodigoUnico")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("codigo_unico");

                    b.Property<string>("Contacto")
                        .HasColumnType("text")
                        .HasColumnName("contacto");

                    b.Property<string>("CorreoContacto")
                        .HasColumnType("text")
                        .HasColumnName("correo_contacto");

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("departamento");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccion");

                    b.Property<string>("Estado")
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCierre")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_cierre");

                    b.Property<DateTime>("FechaInformes")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_informes");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_inicio");

                    b.Property<int>("FormatoProgramaId")
                        .HasColumnType("integer")
                        .HasColumnName("formato_programa_id");

                    b.Property<int?>("FuenteFinanciamientoId")
                        .HasColumnType("integer")
                        .HasColumnName("fuente_financiamiento_id");

                    b.Property<TimeOnly>("HoraProgramada")
                        .HasColumnType("time without time zone")
                        .HasColumnName("hora_programada");

                    b.Property<string>("Idioma")
                        .HasColumnType("text")
                        .HasColumnName("idioma");

                    b.Property<string>("IntruccionesAsistente")
                        .HasColumnType("text")
                        .HasColumnName("instrucciones_asistente");

                    b.Property<string>("LugarDesarrollo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lugar_desarrollo");

                    b.Property<string>("Notas")
                        .HasColumnType("text")
                        .HasColumnName("notas");

                    b.Property<int?>("NumeroMaxParticipantes")
                        .HasColumnType("integer")
                        .HasColumnName("numero_max_participantes");

                    b.Property<int>("NumeroSesiones")
                        .HasColumnType("integer")
                        .HasColumnName("numero_sesiones");

                    b.Property<bool>("PatrociniosCentro")
                        .HasColumnType("boolean")
                        .HasColumnName("patrocinio_centro");

                    b.Property<string>("Recursos")
                        .HasColumnType("text")
                        .HasColumnName("recursos");

                    b.Property<int?>("TelefonoContacto")
                        .HasColumnType("integer")
                        .HasColumnName("telefono_contacto");

                    b.Property<int>("TemaPrincipalId")
                        .HasColumnType("integer")
                        .HasColumnName("tema_principal_id");

                    b.Property<int>("TipoId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_id");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("titulo");

                    b.Property<int?>("TotalHoras")
                        .HasColumnType("integer")
                        .HasColumnName("total_horas");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("unidad");

                    b.Property<string>("UnidadHistorica")
                        .HasColumnType("text")
                        .HasColumnName("unidad_historica");

                    b.HasKey("Id")
                        .HasName("pk_capacitaciones");

                    b.HasIndex("FormatoProgramaId")
                        .HasDatabaseName("ix_capacitaciones_formato_programa_id");

                    b.HasIndex("FuenteFinanciamientoId")
                        .HasDatabaseName("ix_capacitaciones_fuente_financiamiento_id");

                    b.HasIndex("TemaPrincipalId")
                        .HasDatabaseName("ix_capacitaciones_tema_principal_id");

                    b.HasIndex("TipoId")
                        .HasDatabaseName("ix_capacitaciones_tipo_id");

                    b.ToTable("capacitaciones");
                });

            modelBuilder.Entity("Dominio.CapacitacionesArchivos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CapacitacionId")
                        .HasColumnType("integer")
                        .HasColumnName("capacitacion_id");

                    b.Property<byte[]>("Contenido")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("contenido");

                    b.Property<DateTime>("FechaSubida")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_subida");

                    b.Property<string>("NombreOriginal")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_original");

                    b.Property<string>("TipoMime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_mime");

                    b.HasKey("Id")
                        .HasName("pk_capacitaciones_archivos");

                    b.HasIndex("CapacitacionId")
                        .HasDatabaseName("ix_capacitaciones_archivos_capacitacion_id");

                    b.ToTable("capacitaciones_archivos");
                });

            modelBuilder.Entity("Dominio.CapacitacionesTemas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CapacitacionId")
                        .HasColumnType("integer")
                        .HasColumnName("capacitacion_id");

                    b.Property<int>("TemaId")
                        .HasColumnType("integer")
                        .HasColumnName("tema_id");

                    b.HasKey("Id")
                        .HasName("pk_capacitaciones_temas");

                    b.HasIndex("CapacitacionId")
                        .HasDatabaseName("ix_capacitaciones_temas_capacitacion_id");

                    b.HasIndex("TemaId")
                        .HasDatabaseName("ix_capacitaciones_temas_tema_id");

                    b.ToTable("capacitaciones_temas");
                });

            modelBuilder.Entity("Dominio.CategoriasLaborales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_categorias_laborales");

                    b.ToTable("categorias_laborales");
                });

            modelBuilder.Entity("Dominio.ClientesEmpresas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AreasADominar")
                        .HasColumnType("text")
                        .HasColumnName("areas_a_dominar");

                    b.Property<bool>("BeneficiadoCde")
                        .HasColumnType("boolean")
                        .HasColumnName("beneficiado_cde");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ciudad");

                    b.Property<string>("CodigoUnico")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("codigo_unico");

                    b.Property<int?>("ComercioInternacionalId")
                        .HasColumnType("integer")
                        .HasColumnName("comercio_internacional_id");

                    b.Property<string>("ComoSolicitoCredito")
                        .HasColumnType("text")
                        .HasColumnName("como_solicito_credito");

                    b.Property<int>("ContactoPrimarioId")
                        .HasColumnType("integer")
                        .HasColumnName("contacto_primario_id");

                    b.Property<bool>("ContratoGobierno")
                        .HasColumnType("boolean")
                        .HasColumnName("contrato_gobierno");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("correo");

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("departamento");

                    b.Property<string>("DescripcionProductoServicio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion_producto_servicio");

                    b.Property<string>("DireccionFisica")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccion_fisica");

                    b.Property<int?>("EmpleadosMedioTiempo")
                        .HasColumnType("integer")
                        .HasColumnName("empleados_medio_tiempo");

                    b.Property<int>("EmpleadosTiempoCompleto")
                        .HasColumnType("integer")
                        .HasColumnName("empleados_tiempo_completo");

                    b.Property<string>("EstatusActual")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estatus_actual");

                    b.Property<string>("EstatusInicial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estatus_inicial");

                    b.Property<DateTime>("FechaEstablecimiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_establecimiento");

                    b.Property<DateTime>("FechaGananciasPerdidasBrutas")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_ganancias_perdidas_brutas");

                    b.Property<DateTime>("FechaIngresosBrutos")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_ingresos_brutos");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_inicio");

                    b.Property<string>("FondoConcursable")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fondo_concursable");

                    b.Property<int>("FuenteFinanciamientoId")
                        .HasColumnType("integer")
                        .HasColumnName("fuente_financiamiento_id");

                    b.Property<double?>("GananciasPerdidasBrutas")
                        .HasColumnType("double precision")
                        .HasColumnName("ganancias_perdidas_brutas");

                    b.Property<string>("GeneroPropietario")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("genero_propietario");

                    b.Property<bool>("HaSolicitadoCredito")
                        .HasColumnType("boolean")
                        .HasColumnName("ha_solicitado_credito");

                    b.Property<double>("IngresosBrutosAnuales")
                        .HasColumnType("double precision")
                        .HasColumnName("ingresos_brutos_anuales");

                    b.Property<double?>("IngresosExportaciones")
                        .HasColumnType("double precision")
                        .HasColumnName("ingresos_exportaciones");

                    b.Property<string>("Instrucciones")
                        .HasColumnType("text")
                        .HasColumnName("instrucciones");

                    b.Property<string>("LugarDesarrolloEmprendimiento")
                        .HasColumnType("text")
                        .HasColumnName("lugar_desarrollo_emprendimiento");

                    b.Property<string>("MediosPago")
                        .HasColumnType("text")
                        .HasColumnName("medios_pago");

                    b.Property<string>("Motivacion")
                        .HasColumnType("text")
                        .HasColumnName("motivacion");

                    b.Property<bool>("NegocioEnCasa")
                        .HasColumnType("boolean")
                        .HasColumnName("negocio_en_casa");

                    b.Property<bool>("NegocioEnLinea")
                        .HasColumnType("boolean")
                        .HasColumnName("negocio_en_linea");

                    b.Property<int>("NivelFormalizacionId")
                        .HasColumnType("integer")
                        .HasColumnName("nivel_formalizacion_id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<int>("NombrePropietarioId")
                        .HasColumnType("integer")
                        .HasColumnName("nombre_propietario_id");

                    b.Property<string>("Notas")
                        .HasColumnType("text")
                        .HasColumnName("notas");

                    b.Property<string>("Obstaculos")
                        .HasColumnType("text")
                        .HasColumnName("obstaculos");

                    b.Property<string>("PaginaWeb")
                        .HasColumnType("text")
                        .HasColumnName("pagina_web");

                    b.Property<string>("PaisExporta")
                        .HasColumnType("text")
                        .HasColumnName("paises_exporta");

                    b.Property<bool>("ParticipaGremio")
                        .HasColumnType("boolean")
                        .HasColumnName("participa_gremio");

                    b.Property<string>("PorQueNoCredito")
                        .HasColumnType("text")
                        .HasColumnName("porque_no_credito");

                    b.Property<string>("RazonSocial")
                        .HasColumnType("text")
                        .HasColumnName("razon_social");

                    b.Property<int>("ServicioSolicitadoId")
                        .HasColumnType("integer")
                        .HasColumnName("servicio_solicitado_id");

                    b.Property<int?>("SubFuenteFinanciamientoId")
                        .HasColumnType("integer")
                        .HasColumnName("subfuente_financiamiento_id");

                    b.Property<int>("TamanoEmpresaId")
                        .HasColumnType("integer")
                        .HasColumnName("tamano_empresa_id");

                    b.Property<int>("Telefono")
                        .HasColumnType("integer")
                        .HasColumnName("telefono");

                    b.Property<string>("TipoCasoEnProceso")
                        .HasColumnType("text")
                        .HasColumnName("tipo_casos_en_proceso");

                    b.Property<int>("TipoClienteEstadoId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_cliente_estado_id");

                    b.Property<int>("TipoClienteNivelId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_cliente_nivel_id");

                    b.Property<int>("TipoContabilidadId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_contabilidad_id");

                    b.Property<int>("TipoEmpresaId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_empresa_id");

                    b.Property<int>("TipoOrganizacionId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_organizacion_id");

                    b.Property<int?>("TrabajadoresInformales")
                        .HasColumnType("integer")
                        .HasColumnName("trabajadores_informales");

                    b.Property<bool>("UsaPagoElectronico")
                        .HasColumnType("boolean")
                        .HasColumnName("usa_pago_electronico");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.Property<bool>("ZonaIndigena")
                        .HasColumnType("boolean")
                        .HasColumnName("zona_indigena");

                    b.HasKey("Id")
                        .HasName("pk_clientes_empresas");

                    b.HasIndex("ComercioInternacionalId")
                        .HasDatabaseName("ix_clientes_empresas_comercio_internacional_id");

                    b.HasIndex("ContactoPrimarioId");

                    b.HasIndex("FuenteFinanciamientoId");

                    b.HasIndex("NivelFormalizacionId")
                        .HasDatabaseName("ix_clientes_empresas_nivel_formalizacion_id");

                    b.HasIndex("NombrePropietarioId");

                    b.HasIndex("ServicioSolicitadoId")
                        .HasDatabaseName("ix_clientes_empresas_servicio_solicitado_id");

                    b.HasIndex("SubFuenteFinanciamientoId");

                    b.HasIndex("TamanoEmpresaId")
                        .HasDatabaseName("ix_clientes_empresas_tamano_empresa_id");

                    b.HasIndex("TipoClienteEstadoId")
                        .HasDatabaseName("ix_clientes_empresas_tipo_cliente_estado_id");

                    b.HasIndex("TipoClienteNivelId")
                        .HasDatabaseName("ix_clientes_empresas_tipo_cliente_nivel_id");

                    b.HasIndex("TipoContabilidadId")
                        .HasDatabaseName("ix_clientes_empresas_tipo_contabilidad_id");

                    b.HasIndex("TipoEmpresaId")
                        .HasDatabaseName("ix_clientes_empresas_tipo_empresa_id");

                    b.HasIndex("TipoOrganizacionId")
                        .HasDatabaseName("ix_clientes_empresas_tipo_organizacion_id");

                    b.ToTable("clientes_empresas");
                });

            modelBuilder.Entity("Dominio.Contacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apellido");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cargo");

                    b.Property<int?>("CategoriaLaboralId")
                        .HasColumnType("integer")
                        .HasColumnName("categoria_laboral_id");

                    b.Property<string>("Centro")
                        .HasColumnType("text")
                        .HasColumnName("centro");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ciudad");

                    b.Property<string>("CodigoUnico")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("codigo_unico");

                    b.Property<int?>("ContactoDiscapacidad")
                        .HasColumnType("integer")
                        .HasColumnName("contacto_discapacidad");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("correo");

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("departamento");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccion");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dni");

                    b.Property<int?>("EmpresaClienteId")
                        .HasColumnType("integer")
                        .HasColumnName("empresa_cliente_id");

                    b.Property<int?>("EstadoCivilId")
                        .HasColumnType("integer")
                        .HasColumnName("estado_civil_id");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("genero");

                    b.Property<int?>("IntegrantesTotalesFamilia")
                        .HasColumnType("integer")
                        .HasColumnName("integrantes_totales_familia");

                    b.Property<string>("LocalidadEtnica")
                        .HasColumnType("text")
                        .HasColumnName("localidad_etnica");

                    b.Property<string>("Nacionalidad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nacionalidad");

                    b.Property<int>("NivelEstudioId")
                        .HasColumnType("integer")
                        .HasColumnName("nivel_estudio_id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("NombreEtnia")
                        .HasColumnType("text")
                        .HasColumnName("nombre_etnia");

                    b.Property<string>("Notas")
                        .HasColumnType("text")
                        .HasColumnName("notas");

                    b.Property<int?>("NumeroHijas")
                        .HasColumnType("integer")
                        .HasColumnName("numero_hijas");

                    b.Property<int?>("NumeroHijos")
                        .HasColumnType("integer")
                        .HasColumnName("numero_hijos");

                    b.Property<bool>("PoseeNegocio")
                        .HasColumnType("boolean")
                        .HasColumnName("posee_negocio");

                    b.Property<string>("RolContactoFamiliar")
                        .HasColumnType("text")
                        .HasColumnName("rol_contacto_familiar");

                    b.Property<string>("Rtn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rtn");

                    b.Property<int>("Telefono")
                        .HasColumnType("integer")
                        .HasColumnName("telefono");

                    b.HasKey("Id")
                        .HasName("pk_contactos");

                    b.HasIndex("CategoriaLaboralId")
                        .HasDatabaseName("ix_contactos_categoria_laboral_id");

                    b.HasIndex("EmpresaClienteId");

                    b.HasIndex("EstadoCivilId")
                        .HasDatabaseName("ix_contactos_estado_civil_id");

                    b.HasIndex("NivelEstudioId")
                        .HasDatabaseName("ix_contactos_nivel_estudio_id");

                    b.ToTable("contactos");
                });

            modelBuilder.Entity("Dominio.Cuotas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric")
                        .HasColumnName("precio");

                    b.Property<bool>("Publicado")
                        .HasColumnType("boolean")
                        .HasColumnName("publicado");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.HasKey("Id")
                        .HasName("pk_cuotas");

                    b.ToTable("cuotas");
                });

            modelBuilder.Entity("Dominio.EstadosCiviles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_estados_civiles");

                    b.ToTable("estados_civiles");
                });

            modelBuilder.Entity("Dominio.FormatosPrograma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_formatos_programa");

                    b.ToTable("formatos_programa");
                });

            modelBuilder.Entity("Dominio.FuenteFinanciamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_fuentes_financiamiento");

                    b.ToTable("fuentes_financiamiento");
                });

            modelBuilder.Entity("Dominio.NivelesEstudio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_niveles_estudio");

                    b.ToTable("niveles_estudio");
                });

            modelBuilder.Entity("Dominio.NivelesFormalizacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_niveles_formalizacion");

                    b.ToTable("niveles_formalizacion");
                });

            modelBuilder.Entity("Dominio.ServiciosSolicitados", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_servicios_solicitados");

                    b.ToTable("servicios_solicitados");
                });

            modelBuilder.Entity("Dominio.Sesiones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CuotaId")
                        .HasColumnType("integer")
                        .HasColumnName("cuota_id");

                    b.Property<DateTime>("FechaFinal")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_final");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_inicio");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("titulo");

                    b.HasKey("Id")
                        .HasName("pk_sesiones");

                    b.ToTable("sesiones");
                });

            modelBuilder.Entity("Dominio.SesionesCapacitacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CapacitacionId")
                        .HasColumnType("integer")
                        .HasColumnName("capacitacion_id");

                    b.Property<int>("SesionId")
                        .HasColumnType("integer")
                        .HasColumnName("sesion_id");

                    b.HasKey("Id")
                        .HasName("pk_sesiones_capacitacion");

                    b.HasIndex("CapacitacionId")
                        .HasDatabaseName("ix_sesiones_capacitacion_capacitacion_id");

                    b.HasIndex("SesionId")
                        .HasDatabaseName("ix_sesiones_capacitacion_sesion_id");

                    b.ToTable("sesiones_capacitacion");
                });

            modelBuilder.Entity("Dominio.SesionesParticipantes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteEmpresaId")
                        .HasColumnType("integer")
                        .HasColumnName("cliente_empresa_id");

                    b.Property<int>("ContactoId")
                        .HasColumnType("integer")
                        .HasColumnName("contacto_id");

                    b.Property<int>("SesionId")
                        .HasColumnType("integer")
                        .HasColumnName("sesion_id");

                    b.HasKey("Id")
                        .HasName("pk_sesiones_participantes");

                    b.HasIndex("ClienteEmpresaId")
                        .HasDatabaseName("ix_sesiones_participantes_cliente_empresa_id");

                    b.HasIndex("ContactoId")
                        .HasDatabaseName("ix_sesiones_participantes_contacto_id");

                    b.HasIndex("SesionId")
                        .HasDatabaseName("ix_sesiones_participantes_sesion_id");

                    b.ToTable("sesiones_participantes");
                });

            modelBuilder.Entity("Dominio.TamanoEmpresas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_tamano_empresas");

                    b.ToTable("tamano_empresas");
                });

            modelBuilder.Entity("Dominio.Temas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_temas");

                    b.ToTable("temas");
                });

            modelBuilder.Entity("Dominio.Tipos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_tipos");

                    b.ToTable("tipos");
                });

            modelBuilder.Entity("Dominio.TiposClienteNivel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_tipos_cliente_nivel");

                    b.ToTable("tipos_cliente_nivel");
                });

            modelBuilder.Entity("Dominio.TiposClientesEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_tipos_clientes_estado");

                    b.ToTable("tipos_clientes_estado");
                });

            modelBuilder.Entity("Dominio.TiposComerciosInternacional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_tipos_comercio_internacional");

                    b.ToTable("tipos_comercio_internacional");
                });

            modelBuilder.Entity("Dominio.TiposContabilidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_tipos_contabilidad");

                    b.ToTable("tipos_contabilidad");
                });

            modelBuilder.Entity("Dominio.TiposContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_tipos_contacto");

                    b.ToTable("tipos_contacto");
                });

            modelBuilder.Entity("Dominio.TiposEmpresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_tipos_empresa");

                    b.ToTable("tipos_empresa");
                });

            modelBuilder.Entity("Dominio.TiposOrganizacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_tipos_organizacion");

                    b.ToTable("tipos_organizacion");
                });

            modelBuilder.Entity("Dominio.Unidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id")
                        .HasName("pk_unidades");

                    b.ToTable("unidades");
                });

            modelBuilder.Entity("Dominio.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("accessfailedcount");

                    b.Property<string>("CodigoUnico")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("codigounico");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("emailconfirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockoutenabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockoutend");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombrecompleto");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedemail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedusername");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phonenumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phonenumberconfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("securitystamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("twofactorenabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_aspnetusers");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("emailindex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("usernameindex");

                    b.ToTable("aspnetusers", (string)null);
                });

            modelBuilder.Entity("Dominio.UsuarioUnidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UnidadId")
                        .HasColumnType("integer")
                        .HasColumnName("unidad_id");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_usuarios_unidades");

                    b.HasIndex("UnidadId")
                        .HasDatabaseName("ix_usuarios_unidades_unidad_id");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("ix_usuarios_unidades_usuario_id");

                    b.ToTable("usuarios_unidades");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedname");

                    b.HasKey("Id")
                        .HasName("pk_aspnetroles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("rolenameindex");

                    b.ToTable("aspnetroles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claimvalue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("pk_aspnetroleclaims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_aspnetroleclaims_roleid");

                    b.ToTable("aspnetroleclaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claimvalue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_aspnetuserclaims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_aspnetuserclaims_userid");

                    b.ToTable("aspnetuserclaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("loginprovider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("providerkey");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("providerdisplayname");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_aspnetuserlogins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_aspnetuserlogins_userid");

                    b.ToTable("aspnetuserlogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("roleid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_aspnetuserroles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_aspnetuserroles_roleid");

                    b.ToTable("aspnetuserroles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("loginprovider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_aspnetusertokens");

                    b.ToTable("aspnetusertokens", (string)null);
                });

            modelBuilder.Entity("CuotasSesiones", b =>
                {
                    b.HasOne("Dominio.Cuotas", null)
                        .WithMany()
                        .HasForeignKey("CuotasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cuotassesiones_cuotas_cuotasid");

                    b.HasOne("Dominio.Sesiones", null)
                        .WithMany()
                        .HasForeignKey("SesionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cuotassesiones_sesiones_sesionesid");
                });

            modelBuilder.Entity("Dominio.Asesoria", b =>
                {
                    b.HasOne("Dominio.AreasAsesoria", "AreaAsesoria")
                        .WithMany("Asesorias")
                        .HasForeignKey("AreaAsesoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asesorias_areas_asesorias_area_asesoria_id");

                    b.HasOne("Dominio.ClientesEmpresas", "Cliente")
                        .WithMany("Asesorias")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asesorias_clientes_empresas_cliente_id");

                    b.HasOne("Dominio.FuenteFinanciamiento", "FuenteFinanciamiento")
                        .WithMany("Asesorias")
                        .HasForeignKey("FuenteFinanciamientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asesorias_fuentes_financiamiento_fuente_financiamiento_id");

                    b.HasOne("Dominio.TiposContacto", "TiposContacto")
                        .WithMany("Asesoria")
                        .HasForeignKey("TipoContactoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_asesorias_tipo_contacto");

                    b.Navigation("AreaAsesoria");

                    b.Navigation("Cliente");

                    b.Navigation("FuenteFinanciamiento");

                    b.Navigation("TiposContacto");
                });

            modelBuilder.Entity("Dominio.AsesoriaAsesor", b =>
                {
                    b.HasOne("Dominio.Usuario", "Asesor")
                        .WithMany()
                        .HasForeignKey("AsesorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asesorias_asesores_aspnetusers_asesor_id");

                    b.HasOne("Dominio.Asesoria", "Asesoria")
                        .WithMany("Asesores")
                        .HasForeignKey("AsesoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asesorias_asesores_asesorias_asesoria_id");

                    b.Navigation("Asesor");

                    b.Navigation("Asesoria");
                });

            modelBuilder.Entity("Dominio.AsesoriaContacto", b =>
                {
                    b.HasOne("Dominio.Asesoria", "Asesoria")
                        .WithMany("AsesoriasContactos")
                        .HasForeignKey("AsesoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asesorias_contactos_asesorias_asesoria_id");

                    b.HasOne("Dominio.ClientesEmpresas", "ClienteEmpresa")
                        .WithMany("AsesoriasContactos")
                        .HasForeignKey("ClienteEmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asesorias_contactos_clientes_empresas_cliente_empresa_id");

                    b.HasOne("Dominio.Contacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asesorias_contactos_contactos_contacto_id");

                    b.Navigation("Asesoria");

                    b.Navigation("ClienteEmpresa");

                    b.Navigation("Contacto");
                });

            modelBuilder.Entity("Dominio.AsesoriasArchivos", b =>
                {
                    b.HasOne("Dominio.Asesoria", "Asesoria")
                        .WithMany("Archivos")
                        .HasForeignKey("AsesoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asesorias_archivos_asesorias_asesoria_id");

                    b.Navigation("Asesoria");
                });

            modelBuilder.Entity("Dominio.Capacitaciones", b =>
                {
                    b.HasOne("Dominio.FormatosPrograma", "FormatoPrograma")
                        .WithMany("Capacitaciones")
                        .HasForeignKey("FormatoProgramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_capacitaciones_formatos_programa_formato_programa_id");

                    b.HasOne("Dominio.FuenteFinanciamiento", "FuenteFinanciamiento")
                        .WithMany("Capacitaciones")
                        .HasForeignKey("FuenteFinanciamientoId")
                        .HasConstraintName("fk_capacitaciones_fuentes_financiamiento_fuente_financiamiento~");

                    b.HasOne("Dominio.Temas", "TemaPrincipal")
                        .WithMany()
                        .HasForeignKey("TemaPrincipalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_capacitaciones_temas_tema_principal_id");

                    b.HasOne("Dominio.Tipos", "Tipo")
                        .WithMany("Capacitaciones")
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_capacitaciones_tipos_tipo_id");

                    b.Navigation("FormatoPrograma");

                    b.Navigation("FuenteFinanciamiento");

                    b.Navigation("TemaPrincipal");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("Dominio.CapacitacionesArchivos", b =>
                {
                    b.HasOne("Dominio.Capacitaciones", "Capacitacion")
                        .WithMany("Archivos")
                        .HasForeignKey("CapacitacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_capacitaciones_archivos_capacitaciones_capacitacion_id");

                    b.Navigation("Capacitacion");
                });

            modelBuilder.Entity("Dominio.CapacitacionesTemas", b =>
                {
                    b.HasOne("Dominio.Capacitaciones", "Capacitacion")
                        .WithMany("CapacitacionesTemas")
                        .HasForeignKey("CapacitacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_capacitaciones_temas_capacitaciones_capacitacion_id");

                    b.HasOne("Dominio.Temas", "Tema")
                        .WithMany("CapacitacionesTemas")
                        .HasForeignKey("TemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_capacitaciones_temas_temas_tema_id");

                    b.Navigation("Capacitacion");

                    b.Navigation("Tema");
                });

            modelBuilder.Entity("Dominio.ClientesEmpresas", b =>
                {
                    b.HasOne("Dominio.TiposComerciosInternacional", "ComercioInternacional")
                        .WithMany("ClientesEmpresas")
                        .HasForeignKey("ComercioInternacionalId")
                        .HasConstraintName("fk_clientes_empresas_tipos_comercio_internacional_comercio_int~");

                    b.HasOne("Dominio.Contacto", "ContactoPrimario")
                        .WithMany()
                        .HasForeignKey("ContactoPrimarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.FuenteFinanciamiento", "FuenteFinanciamiento")
                        .WithMany("ClientesEmpresasFuente")
                        .HasForeignKey("FuenteFinanciamientoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.NivelesFormalizacion", "NivelFormalizacion")
                        .WithMany("ClientesEmpresas")
                        .HasForeignKey("NivelFormalizacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_clientes_empresas_niveles_formalizacion_nivel_formalizacion~");

                    b.HasOne("Dominio.Contacto", "NombrePropietario")
                        .WithMany()
                        .HasForeignKey("NombrePropietarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.ServiciosSolicitados", "ServicioSolicitado")
                        .WithMany("ClientesEmpresas")
                        .HasForeignKey("ServicioSolicitadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clientes_empresas_servicios_solicitados_servicio_solicitado~");

                    b.HasOne("Dominio.FuenteFinanciamiento", "SubFuenteFinanciamiento")
                        .WithMany("ClientesEmpresasSubfuente")
                        .HasForeignKey("SubFuenteFinanciamientoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dominio.TamanoEmpresas", "TamanoEmpresa")
                        .WithMany("ClientesEmpresas")
                        .HasForeignKey("TamanoEmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clientes_empresas_tamano_empresas_tamano_empresa_id");

                    b.HasOne("Dominio.TiposClientesEstado", "TipoClienteEstado")
                        .WithMany("ClientesEmpresas")
                        .HasForeignKey("TipoClienteEstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clientes_empresas_tipos_clientes_estado_tipo_cliente_estado~");

                    b.HasOne("Dominio.TiposClienteNivel", "TipoClienteNivel")
                        .WithMany("ClientesEmpresas")
                        .HasForeignKey("TipoClienteNivelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clientes_empresas_tipos_cliente_nivel_tipo_cliente_nivel_id");

                    b.HasOne("Dominio.TiposContabilidad", "TipoContabilidad")
                        .WithMany("ClientesEmpresas")
                        .HasForeignKey("TipoContabilidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clientes_empresas_tipos_contabilidad_tipo_contabilidad_id");

                    b.HasOne("Dominio.TiposEmpresa", "TipoEmpresa")
                        .WithMany("ClientesEmpresas")
                        .HasForeignKey("TipoEmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clientes_empresas_tipos_empresa_tipo_empresa_id");

                    b.HasOne("Dominio.TiposOrganizacion", "TipoOrganizacion")
                        .WithMany("ClientesEmpresas")
                        .HasForeignKey("TipoOrganizacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clientes_empresas_tipos_organizacion_tipo_organizacion_id");

                    b.Navigation("ComercioInternacional");

                    b.Navigation("ContactoPrimario");

                    b.Navigation("FuenteFinanciamiento");

                    b.Navigation("NivelFormalizacion");

                    b.Navigation("NombrePropietario");

                    b.Navigation("ServicioSolicitado");

                    b.Navigation("SubFuenteFinanciamiento");

                    b.Navigation("TamanoEmpresa");

                    b.Navigation("TipoClienteEstado");

                    b.Navigation("TipoClienteNivel");

                    b.Navigation("TipoContabilidad");

                    b.Navigation("TipoEmpresa");

                    b.Navigation("TipoOrganizacion");
                });

            modelBuilder.Entity("Dominio.Contacto", b =>
                {
                    b.HasOne("Dominio.CategoriasLaborales", "CategoriaLaboral")
                        .WithMany("Contactos")
                        .HasForeignKey("CategoriaLaboralId")
                        .HasConstraintName("fk_contactos_categorias_laborales_categoria_laboral_id");

                    b.HasOne("Dominio.ClientesEmpresas", "ClienteEmpresa")
                        .WithMany("Contactos")
                        .HasForeignKey("EmpresaClienteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dominio.EstadosCiviles", "EstadoCivil")
                        .WithMany("Contactos")
                        .HasForeignKey("EstadoCivilId")
                        .HasConstraintName("fk_contactos_estados_civiles_estado_civil_id");

                    b.HasOne("Dominio.NivelesEstudio", "NivelEstudio")
                        .WithMany("Contactos")
                        .HasForeignKey("NivelEstudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contactos_niveles_estudio_nivel_estudio_id");

                    b.Navigation("CategoriaLaboral");

                    b.Navigation("ClienteEmpresa");

                    b.Navigation("EstadoCivil");

                    b.Navigation("NivelEstudio");
                });

            modelBuilder.Entity("Dominio.SesionesCapacitacion", b =>
                {
                    b.HasOne("Dominio.Capacitaciones", "Capacitacion")
                        .WithMany("SesionesCapacitacion")
                        .HasForeignKey("CapacitacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sesiones_capacitacion_capacitaciones_capacitacion_id");

                    b.HasOne("Dominio.Sesiones", "Sesion")
                        .WithMany("SesionesCapacitaciones")
                        .HasForeignKey("SesionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sesiones_capacitacion_sesiones_sesion_id");

                    b.Navigation("Capacitacion");

                    b.Navigation("Sesion");
                });

            modelBuilder.Entity("Dominio.SesionesParticipantes", b =>
                {
                    b.HasOne("Dominio.ClientesEmpresas", "ClienteEmpresa")
                        .WithMany("SesionesParticipantes")
                        .HasForeignKey("ClienteEmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sesiones_participantes_clientes_empresas_cliente_empresa_id");

                    b.HasOne("Dominio.Contacto", "Contacto")
                        .WithMany("SesionesParticipantes")
                        .HasForeignKey("ContactoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sesiones_participantes_contactos_contacto_id");

                    b.HasOne("Dominio.Sesiones", "Sesion")
                        .WithMany("SesionesParticipantes")
                        .HasForeignKey("SesionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sesiones_participantes_sesiones_sesion_id");

                    b.Navigation("ClienteEmpresa");

                    b.Navigation("Contacto");

                    b.Navigation("Sesion");
                });

            modelBuilder.Entity("Dominio.UsuarioUnidad", b =>
                {
                    b.HasOne("Dominio.Unidad", "Unidad")
                        .WithMany("UsuariosUnidades")
                        .HasForeignKey("UnidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_usuarios_unidades_unidades_unidad_id");

                    b.HasOne("Dominio.Usuario", "Usuario")
                        .WithMany("UsuariosUnidades")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_usuarios_unidades_aspnetusers_usuario_id");

                    b.Navigation("Unidad");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetroleclaims_aspnetroles_roleid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Dominio.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserclaims_aspnetusers_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Dominio.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserlogins_aspnetusers_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserroles_aspnetroles_roleid");

                    b.HasOne("Dominio.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserroles_aspnetusers_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Dominio.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetusertokens_aspnetusers_userid");
                });

            modelBuilder.Entity("Dominio.AreasAsesoria", b =>
                {
                    b.Navigation("Asesorias");
                });

            modelBuilder.Entity("Dominio.Asesoria", b =>
                {
                    b.Navigation("Archivos");

                    b.Navigation("Asesores");

                    b.Navigation("AsesoriasContactos");
                });

            modelBuilder.Entity("Dominio.Capacitaciones", b =>
                {
                    b.Navigation("Archivos");

                    b.Navigation("CapacitacionesTemas");

                    b.Navigation("SesionesCapacitacion");
                });

            modelBuilder.Entity("Dominio.CategoriasLaborales", b =>
                {
                    b.Navigation("Contactos");
                });

            modelBuilder.Entity("Dominio.ClientesEmpresas", b =>
                {
                    b.Navigation("Asesorias");

                    b.Navigation("AsesoriasContactos");

                    b.Navigation("Contactos");

                    b.Navigation("SesionesParticipantes");
                });

            modelBuilder.Entity("Dominio.Contacto", b =>
                {
                    b.Navigation("SesionesParticipantes");
                });

            modelBuilder.Entity("Dominio.EstadosCiviles", b =>
                {
                    b.Navigation("Contactos");
                });

            modelBuilder.Entity("Dominio.FormatosPrograma", b =>
                {
                    b.Navigation("Capacitaciones");
                });

            modelBuilder.Entity("Dominio.FuenteFinanciamiento", b =>
                {
                    b.Navigation("Asesorias");

                    b.Navigation("Capacitaciones");

                    b.Navigation("ClientesEmpresasFuente");

                    b.Navigation("ClientesEmpresasSubfuente");
                });

            modelBuilder.Entity("Dominio.NivelesEstudio", b =>
                {
                    b.Navigation("Contactos");
                });

            modelBuilder.Entity("Dominio.NivelesFormalizacion", b =>
                {
                    b.Navigation("ClientesEmpresas");
                });

            modelBuilder.Entity("Dominio.ServiciosSolicitados", b =>
                {
                    b.Navigation("ClientesEmpresas");
                });

            modelBuilder.Entity("Dominio.Sesiones", b =>
                {
                    b.Navigation("SesionesCapacitaciones");

                    b.Navigation("SesionesParticipantes");
                });

            modelBuilder.Entity("Dominio.TamanoEmpresas", b =>
                {
                    b.Navigation("ClientesEmpresas");
                });

            modelBuilder.Entity("Dominio.Temas", b =>
                {
                    b.Navigation("CapacitacionesTemas");
                });

            modelBuilder.Entity("Dominio.Tipos", b =>
                {
                    b.Navigation("Capacitaciones");
                });

            modelBuilder.Entity("Dominio.TiposClienteNivel", b =>
                {
                    b.Navigation("ClientesEmpresas");
                });

            modelBuilder.Entity("Dominio.TiposClientesEstado", b =>
                {
                    b.Navigation("ClientesEmpresas");
                });

            modelBuilder.Entity("Dominio.TiposComerciosInternacional", b =>
                {
                    b.Navigation("ClientesEmpresas");
                });

            modelBuilder.Entity("Dominio.TiposContabilidad", b =>
                {
                    b.Navigation("ClientesEmpresas");
                });

            modelBuilder.Entity("Dominio.TiposContacto", b =>
                {
                    b.Navigation("Asesoria");
                });

            modelBuilder.Entity("Dominio.TiposEmpresa", b =>
                {
                    b.Navigation("ClientesEmpresas");
                });

            modelBuilder.Entity("Dominio.TiposOrganizacion", b =>
                {
                    b.Navigation("ClientesEmpresas");
                });

            modelBuilder.Entity("Dominio.Unidad", b =>
                {
                    b.Navigation("UsuariosUnidades");
                });

            modelBuilder.Entity("Dominio.Usuario", b =>
                {
                    b.Navigation("UsuariosUnidades");
                });
#pragma warning restore 612, 618
        }
    }
}
